function write_schism_source_nc(Mobj, D, tracer_list)
% Write the source.nc file for SHCISM
% 
%% Syntax
% write_schism_source_nc(Mobj, D)
% write_schism_source_nc(Mobj, D, tracer_list)
% 
%% Description 
% write_schism_source_nc(Mobj, D) writes the source.nc file.
% write_schism_source_nc(Mobj, D, tracer_list) specifies the tracers to be
% written.
%
%% Example
% SS = def_schism_source(Mobj, [1 0], 1, 'rebuild');
% [D, RivFlux] = get_river_source(Mobj, SS, 1);
% write_schism_source_nc(Mobj, D,  {'temp', 'salt'})
%
%% Input Arguments
% Mobj --- the mesh object
% D --- the datastruct generated by 'get_river_source', which contains the
% river data with specific format.
% tracer_list --- the tracers to be written. Default: tracer_list =
% {'temp', 'salt'}; More tracers will be considered in the future. 
%
%% Output Arguments
% None
%
%% Author Info
% Created by Wenfan Wu, Ocean Univ. of China in 2021. 
% Last Updated on 2 Dec. 2021. 
% Email: wenfanwu@stu.ouc.edu.cn
% 
% See also: get_river_source and def_schism_source

%% Parse inputs
if nargin < 2
    tracer_list = {'temp', 'salt'};
end
tracer_list = lower(tracer_list);

% check the tracer order
ind_tracers = arrayfun(@(x) find(contains(lower(Mobj.active_tracers), x)), tracer_list);
if ~issorted(ind_tracers)
    error('the tracer order is not right, please check!')
else
    disp('the tracer order is correct')
end
%% Load data 
% nsources, nsinks, ntracers
ntracers = numel(tracer_list);
nsources = max(1, length(D.source_elems));
nsinks = max(1,length(D.sink_elems));
ntimes = length(D.vsource.time);

time_step_vsource = D.vsource.dt;
time_step_msource = D.msource.dt;
time_step_vsink= D.vsink.dt;

time_msource = seconds(D.msource.time-D.msource.time(1));
time_vsource = seconds(D.vsource.time-D.vsource.time(1));
time_vsink = seconds(D.vsink.time-D.vsink.time(1));

source_elem = D.source_elems;
sink_elem = D.sink_elems;

if isempty(sink_elem)
    sink_elem = 1;
end

msource = [];
for ii = 1:length(tracer_list)
    trc_name = tracer_list{ii};
    trc_data = D.msource.(trc_name);
    msource = cat(3, msource, trc_data);
end
msource = permute(msource, [2 3 1]);
vsource = D.vsource.runoff';
vsink = D.vsink.runoff(:,1)'; % Cautions

%% Begin to write (source.nc )

fileName = fullfile(Mobj.aimpath, 'source.nc');
if exist(fileName,'file')==2
    delete(fileName);
end

nccreate(fileName,'time_step_vsource','Datatype','double','Format','netcdf4')
ncwrite(fileName,'time_step_vsource', time_step_vsource);

nccreate(fileName,'time_step_msource','Datatype','double','Format','netcdf4')
ncwrite(fileName,'time_step_msource', time_step_msource);

nccreate(fileName,'time_step_vsink','Datatype','double','Format','netcdf4')
ncwrite(fileName,'time_step_vsink', time_step_vsink);

nccreate(fileName,'time_vsource','Dimensions',{'time_vsource', ntimes},'Datatype','double','Format','netcdf4')
ncwrite(fileName,'time_vsource', time_vsource);

nccreate(fileName,'time_msource','Dimensions',{'time_msource', ntimes},'Datatype','double','Format','netcdf4')
ncwrite(fileName,'time_msource', time_msource);

nccreate(fileName,'time_vsink','Dimensions',{'time_vsink', ntimes},'Datatype','double','Format','netcdf4')
ncwrite(fileName,'time_vsink', time_vsink);

nccreate(fileName,'source_elem','Dimensions',{'nsources', nsources},'Datatype','double','Format','netcdf4')
ncwrite(fileName,'source_elem', source_elem);

nccreate(fileName,'sink_elem','Dimensions',{'nsinks', nsinks},'Datatype','double','Format','netcdf4')
ncwrite(fileName,'sink_elem', sink_elem);

nccreate(fileName,'vsource','Dimensions',{'nsources', nsources, 'time', ntimes},'Datatype','double','Format','netcdf4')
ncwrite(fileName,'vsource', vsource);

nccreate(fileName,'msource','Dimensions',{'nsources', nsources, 'ntracers', ntracers, 'time', ntimes},'Datatype','double','Format','netcdf4')
ncwrite(fileName,'msource', msource);

nccreate(fileName,'vsink','Dimensions',{'nsinks', nsinks, 'time', ntimes},'Datatype','double','Format','netcdf4')
ncwrite(fileName,'vsink', vsink);

disp('source.nc has been successfully created!')

end
















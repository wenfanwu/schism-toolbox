function write_schism_hgrid(Mobj, RivBnd)
% Write the hgrid.gr3&hgrid.ll file for SCHISM.
% 
%% Syntax
% write_schism_hgrid(Mobj)
% write_schism_hgrid(Mobj, RivBnd)

%% Description 
% write_schism_hgrid(Mobj, RivBnd) writes the hgrid.gr3&hgrid.ll files for
% SCHISM. 
% write_schism_hgrid(Mobj, RivBnd) writes the hgrid.gr3&hgrid.ll when the
% river is specified as boundary nodes (Not quite work now!). 

%% Example
% meshfile = 'E:\Numerical-Models\Model-Exps\SCHISM\Exp3_Bohai2\inputs\BYES_34651.mat';
% Mobj = mesh2schism(meshfile);
% write_schism_hgrid(Mobj)
%
%% Input Arguments
% Mobj --- the mesh object generated by 'mesh2schism'.
%
%% Output Arguments
% None
%
%% Author Info
% Created by Wenfan Wu, Ocean Univ. of China in 2021. 
% Last Updated on 9 Nov. 2021. 
% Email: wenfanwu@stu.ouc.edu.cn
% 
% See also: fopen

%% Parse inputs
if nargin == 1
    obc_nodes = Mobj.obc_nodes;
    obc_counts = Mobj.obc_counts;
    nNodes_obc = Mobj.nNodes_obc;
else % if river input is added as open boundary
    obc_counts = Mobj.obc_counts + RivBnd.riverNums;
    nNodes_obc = Mobj.nNodes_obc +length(RivBnd.riverNodes);
    obc_nodes = zeros(size(Mobj.obc_nodes,1), obc_counts);
    obc_nodes(:,1:Mobj.obc_counts) = Mobj.obc_nodes;
    for ii = 1:RivBnd.riverNums
        indRiver = RivBnd.ind(ii):RivBnd.ind(ii)+RivBnd.branchLens(ii)-1;
        obc_nodes(1:RivBnd.branchLens(ii), ii+1) = RivBnd.riverNodes(indRiver);
    end
end

%% Begin to write
fileName = fullfile(Mobj.aimpath, 'hgrid.gr3');
fileName2 = fullfile(Mobj.aimpath, 'hgrid.ll');

fid = fopen(fileName,'wt');
fprintf(fid, [Mobj.expname, '\n']);                                                           % alphanumeric description; ignored by code
fprintf(fid, [num2str(Mobj.nElems),' ',num2str(Mobj.nNodes), '\n']);     % # of elements and nodes in the horizontal grid

% List of node info:
node_part = [(1:Mobj.nNodes)', Mobj.lon(:), Mobj.lat(:), Mobj.depth(:)]';
node_fmt = repmat('%d   %14.6f   %14.6f   %13.7e\n', 1, size(node_part,2));
fprintf(fid, node_fmt, node_part(:));

% Connectivity table:
con_tab = Mobj.tri;
con_tab(con_tab~=0) = 1;
grid_types = sum(con_tab,2);

node_part = [(1:Mobj.nElems)', grid_types(:), Mobj.tri(:,1), Mobj.tri(:,2), Mobj.tri(:,3)]';
node_fmt = repmat('%d %d %d %d %d\n', 1, size(node_part,2));
fprintf(fid, node_fmt, node_part(:));

% Will the part above fail due to the string length constraints of
% MATLAB when the # of nodes is too large? I am not sure.

%% List of open and land boundary segments (needed for hgrid.gr3 only; not needed for other *.gr3)
% WRITE THE OPEN BOUNDARY PART
fprintf(fid, [num2str(obc_counts), ' = Number of open boundaries\n']);
fprintf(fid, [num2str(nNodes_obc), ' = Total number of open boundary nodes\n']);
for iSeg = 1:obc_counts
    tmp = obc_nodes(:,iSeg);
    tmp(tmp==0) = [];
    fprintf(fid, [num2str(length(tmp),'%d'), ' = Number of nodes for open boundary ',num2str(iSeg),'\n']);
    
    node_part = tmp(:)';
    node_fmt = repmat('%d\n', 1, size(node_part,2));
    fprintf(fid, node_fmt, node_part(:));
end

% WRITE THE LAND PART
fprintf(fid, [num2str(Mobj.land_counts+Mobj.island_counts), ' = number of land boundaries\n']);   % including island numbers here
fprintf(fid, [num2str(Mobj.nNodes_land+Mobj.nNodes_island), ' = Total number of land boundary nodes\n']);
for iLand1 = 1:Mobj.land_counts
    tmp = Mobj.land_nodes(:,iLand1);
    tmp(tmp==0) = [];
    fprintf(fid, [num2str(length(tmp),'%d'), ' 0 = Number of nodes for land boundary ',num2str(iLand1),'\n']);
    
    node_part = tmp(:)';
    node_fmt = repmat('%d\n', 1, size(node_part,2));
    fprintf(fid, node_fmt, node_part(:));
end

% WRITE THE ISLAND PART
for iLand2 = 1:Mobj.island_counts
    tmp = Mobj.island_nodes(:,iLand2);
    tmp(tmp==0) = [];
    fprintf(fid, [num2str(length(tmp),'%d'), ' 1 = Number of nodes for island boundary ',num2str(iLand2),'\n']);
    
    node_part = tmp(:)';
    node_fmt = repmat('%d\n', 1, size(node_part,2));
    fprintf(fid, node_fmt, node_part(:));
end
fclose(fid);
eval(['copyfile ', fileName, ' ',fileName2])

disp('hgrid.gr3&hgrid.ll have been created successfully!')
end









